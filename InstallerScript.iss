; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Терминал"


; Менять версии тут
#define MyAppVersion "1.10.0"
#define InstallDirectory "D:\XSoft\TerminalProgram_1.10.0"
#define OutputFileName "TerminalProgram_1.10.0_installer"


#define MyAppPublisher "XSoft"
#define MyAppExeName "TerminalProgram.exe"
#define MyAppAssocName "TerminalProgram File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

#define RuntimeInstallDerictory 'D:\Programming\Visual Studio\0_Runtimes'
#define RuntimeExeName "windowsdesktop-runtime-7.0.4-win-x64.exe"

#define RuntimeDirectory 'C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.4'

; Относительный путь
#define PublishDirectory 'TerminalProgram\bin\Release\net7.0-windows\publish\win-x64'

#define OutputDirectory 'D:\0_Compiled_Installers\TerminalProgram'

; Относительный путь
#define LicenseFileDirectory 'LICENSE.md'

; Относительный путь
#define SetupIconFileDirectory 'TerminalProgram\Resources\MainLogo.ico'

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{DEE0A88B-092D-4E5E-A8C3-F4F35B17E73C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={#InstallDirectory}
ChangesAssociations=yes
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile={#LicenseFileDirectory}
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest

; Перед началом установки показывается диалог с выбором режима установки:
; 1. Для всех как админ
; 2. Только для текущего пользователя
PrivilegesRequiredOverridesAllowed=dialog

OutputDir={#OutputDirectory}\{#MyAppVersion}
OutputBaseFilename={#OutputFileName}
SetupIconFile={#SetupIconFileDirectory}
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
; Исполняемый файл приложения
Source: "{#PublishDirectory}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion

; Служебные файлы
Source: "{#PublishDirectory}\System.IO.Ports.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#PublishDirectory}\TerminalProgram.deps.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#PublishDirectory}\TerminalProgram.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#PublishDirectory}\TerminalProgram.dll.config"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#PublishDirectory}\TerminalProgram.pdb"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#PublishDirectory}\TerminalProgram.runtimeconfig.json"; DestDir: "{app}"; Flags: ignoreversion

; Runtime
Source: "{#RuntimeInstallDerictory}\{#RuntimeExeName}"; DestDir: "{tmp}"; Flags: deleteafterinstall;

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName} {#MyAppVersion}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{tmp}\{#RuntimeExeName}"; StatusMsg: "Install .NET runtime. Please wait..."; Check: not NET_Runtime_IsInstalled
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
// determines if .NET is installed
function NET_Runtime_IsInstalled: Boolean;
begin
  if DirExists(ExpandConstant('{#RuntimeDirectory}')) then 
  begin
    Result := True;
  end else
    Result := False;
end;